// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pkg/proto/loan.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoanService_CreateLoan_FullMethodName   = "/loan.LoanService/CreateLoan"
	LoanService_ApproveLoan_FullMethodName  = "/loan.LoanService/ApproveLoan"
	LoanService_GetLoan_FullMethodName      = "/loan.LoanService/GetLoan"
	LoanService_AddRepayment_FullMethodName = "/loan.LoanService/AddRepayment"
)

// LoanServiceClient is the client API for LoanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanServiceClient interface {
	CreateLoan(ctx context.Context, in *LoanCreateRequest, opts ...grpc.CallOption) (*LoanCreateResponse, error)
	ApproveLoan(ctx context.Context, in *LoanApproveRequest, opts ...grpc.CallOption) (*LoanApproveResponse, error)
	GetLoan(ctx context.Context, in *LoanGetRequest, opts ...grpc.CallOption) (*LoanGetResponse, error)
	AddRepayment(ctx context.Context, in *RepaymentCreateRequest, opts ...grpc.CallOption) (*RepaymentCreateResponse, error)
}

type loanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanServiceClient(cc grpc.ClientConnInterface) LoanServiceClient {
	return &loanServiceClient{cc}
}

func (c *loanServiceClient) CreateLoan(ctx context.Context, in *LoanCreateRequest, opts ...grpc.CallOption) (*LoanCreateResponse, error) {
	out := new(LoanCreateResponse)
	err := c.cc.Invoke(ctx, LoanService_CreateLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) ApproveLoan(ctx context.Context, in *LoanApproveRequest, opts ...grpc.CallOption) (*LoanApproveResponse, error) {
	out := new(LoanApproveResponse)
	err := c.cc.Invoke(ctx, LoanService_ApproveLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) GetLoan(ctx context.Context, in *LoanGetRequest, opts ...grpc.CallOption) (*LoanGetResponse, error) {
	out := new(LoanGetResponse)
	err := c.cc.Invoke(ctx, LoanService_GetLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) AddRepayment(ctx context.Context, in *RepaymentCreateRequest, opts ...grpc.CallOption) (*RepaymentCreateResponse, error) {
	out := new(RepaymentCreateResponse)
	err := c.cc.Invoke(ctx, LoanService_AddRepayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServiceServer is the server API for LoanService service.
// All implementations must embed UnimplementedLoanServiceServer
// for forward compatibility
type LoanServiceServer interface {
	CreateLoan(context.Context, *LoanCreateRequest) (*LoanCreateResponse, error)
	ApproveLoan(context.Context, *LoanApproveRequest) (*LoanApproveResponse, error)
	GetLoan(context.Context, *LoanGetRequest) (*LoanGetResponse, error)
	AddRepayment(context.Context, *RepaymentCreateRequest) (*RepaymentCreateResponse, error)
	mustEmbedUnimplementedLoanServiceServer()
}

// UnimplementedLoanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoanServiceServer struct {
}

func (UnimplementedLoanServiceServer) CreateLoan(context.Context, *LoanCreateRequest) (*LoanCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedLoanServiceServer) ApproveLoan(context.Context, *LoanApproveRequest) (*LoanApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoan not implemented")
}
func (UnimplementedLoanServiceServer) GetLoan(context.Context, *LoanGetRequest) (*LoanGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoan not implemented")
}
func (UnimplementedLoanServiceServer) AddRepayment(context.Context, *RepaymentCreateRequest) (*RepaymentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRepayment not implemented")
}
func (UnimplementedLoanServiceServer) mustEmbedUnimplementedLoanServiceServer() {}

// UnsafeLoanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServiceServer will
// result in compilation errors.
type UnsafeLoanServiceServer interface {
	mustEmbedUnimplementedLoanServiceServer()
}

func RegisterLoanServiceServer(s grpc.ServiceRegistrar, srv LoanServiceServer) {
	s.RegisterService(&LoanService_ServiceDesc, srv)
}

func _LoanService_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_CreateLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).CreateLoan(ctx, req.(*LoanCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_ApproveLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).ApproveLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_ApproveLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).ApproveLoan(ctx, req.(*LoanApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_GetLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).GetLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_GetLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).GetLoan(ctx, req.(*LoanGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_AddRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepaymentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).AddRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_AddRepayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).AddRepayment(ctx, req.(*RepaymentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanService_ServiceDesc is the grpc.ServiceDesc for LoanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan.LoanService",
	HandlerType: (*LoanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoan",
			Handler:    _LoanService_CreateLoan_Handler,
		},
		{
			MethodName: "ApproveLoan",
			Handler:    _LoanService_ApproveLoan_Handler,
		},
		{
			MethodName: "GetLoan",
			Handler:    _LoanService_GetLoan_Handler,
		},
		{
			MethodName: "AddRepayment",
			Handler:    _LoanService_AddRepayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/loan.proto",
}
